name: 📋 內容品質檢查

on:
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/content/**/*.md'
      - 'src/content/medical-specialties/**'
      - 'src/content/templates/**'
  push:
    branches: [ main, master ]
    paths:
      - 'src/content/**/*.md'

# 允許手動觸發
  workflow_dispatch:
    inputs:
      content_path:
        description: '指定檢查的內容路徑'
        required: false
        default: 'src/content/education'

jobs:
  # 基礎驗證工作
  basic-validation:
    runs-on: ubuntu-latest
    name: 🔍 基礎內容驗證
    outputs:
      has-content-changes: ${{ steps.changes.outputs.content }}
      changed-files: ${{ steps.changes.outputs.content_files }}
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 檢測變更檔案
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          content:
            - 'src/content/**/*.md'
          config:
            - 'src/content/config.ts'
            - 'src/content/medical-specialties/**'
          templates:
            - 'src/content/templates/**'
        list-files: json

    - name: 設定 Node.js
      if: steps.changes.outputs.content == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安裝依賴
      if: steps.changes.outputs.content == 'true'
      run: npm ci

    - name: 驗證 Content Collections Schema
      if: steps.changes.outputs.content == 'true'
      run: |
        echo "🔍 驗證 Astro Content Collections..."
        npm run astro check
        echo "✅ Content Collections 驗證通過"

    - name: 檢查 Frontmatter 格式
      if: steps.changes.outputs.content == 'true'
      run: |
        echo "📋 檢查 Frontmatter 格式..."
        
        # 檢查所有變更的 markdown 檔案
        echo '${{ steps.changes.outputs.content_files }}' | jq -r '.[]' | while read file; do
          if [[ -f "$file" ]]; then
            echo "檢查檔案: $file"
            
            # 檢查是否有 frontmatter
            if ! head -n 10 "$file" | grep -q "^---$"; then
              echo "❌ $file: 缺少 frontmatter"
              exit 1
            fi
            
            # 檢查必要欄位
            if ! grep -q "^title:" "$file"; then
              echo "❌ $file: 缺少 title 欄位"
              exit 1
            fi
            
            if ! grep -q "^specialty:" "$file"; then
              echo "❌ $file: 缺少 specialty 欄位"
              exit 1
            fi
            
            echo "✅ $file: Frontmatter 格式正確"
          fi
        done

  # 醫療術語檢查
  terminology-check:
    runs-on: ubuntu-latest
    needs: basic-validation
    if: needs.basic-validation.outputs.has-content-changes == 'true'
    name: 🏥 醫療術語檢查
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安裝依賴
      run: npm ci

    - name: 執行醫療術語檢查
      run: |
        echo "🔍 開始醫療術語檢查..."
        npm run quality:terminology
        echo "✅ 醫療術語檢查完成"

    - name: 上傳術語檢查報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: terminology-report
        path: medical-terminology-report.json
        retention-days: 30

  # 無障礙性驗證
  accessibility-check:
    runs-on: ubuntu-latest
    needs: basic-validation
    if: needs.basic-validation.outputs.has-content-changes == 'true'
    name: ♿ 無障礙性驗證
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安裝依賴
      run: npm ci

    - name: 執行無障礙性驗證
      run: |
        echo "♿ 開始無障礙性驗證..."
        npm run quality:accessibility
        echo "✅ 無障礙性驗證完成"

    - name: 上傳無障礙性報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-report
        path: accessibility-report.json
        retention-days: 30

  # 可讀性分析
  readability-check:
    runs-on: ubuntu-latest
    needs: basic-validation
    if: needs.basic-validation.outputs.has-content-changes == 'true'
    name: 📖 可讀性分析
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安裝依賴
      run: npm ci

    - name: 執行可讀性分析
      run: |
        echo "📖 開始可讀性分析..."
        npm run quality:readability
        echo "✅ 可讀性分析完成"

    - name: 上傳可讀性報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: readability-report
        path: readability-report.json
        retention-days: 30

  # 參考文獻檢查
  references-check:
    runs-on: ubuntu-latest
    needs: basic-validation
    if: needs.basic-validation.outputs.has-content-changes == 'true'
    name: 📚 參考文獻檢查
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安裝依賴
      run: npm ci

    - name: 執行參考文獻檢查
      run: |
        echo "📚 開始參考文獻檢查..."
        npm run quality:references
        echo "✅ 參考文獻檢查完成"

    - name: 上傳參考文獻報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: references-report
        path: reference-format-report.json
        retention-days: 30

  # Markdown 語法檢查
  markdown-lint:
    runs-on: ubuntu-latest
    needs: basic-validation
    if: needs.basic-validation.outputs.has-content-changes == 'true'
    name: 📝 Markdown 語法檢查
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安裝依賴
      run: npm ci

    - name: 執行 Markdown 語法檢查
      run: |
        echo "📝 開始 Markdown 語法檢查..."
        npm run lint:md
        echo "✅ Markdown 語法檢查完成"

  # 綜合品質檢查
  comprehensive-quality-check:
    runs-on: ubuntu-latest
    needs: [basic-validation, terminology-check, accessibility-check, readability-check, references-check, markdown-lint]
    if: always() && needs.basic-validation.outputs.has-content-changes == 'true'
    name: 🎯 綜合品質評估
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4

    - name: 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 安裝依賴
      run: npm ci

    - name: 下載所有檢查報告
      uses: actions/download-artifact@v3
      with:
        path: ./reports

    - name: 執行綜合品質檢查
      run: |
        echo "🎯 開始綜合品質評估..."
        
        # 建立報告目錄
        mkdir -p quality-reports
        
        # 複製個別報告到統一目錄
        find ./reports -name "*.json" -exec cp {} quality-reports/ \;
        
        # 執行綜合品質檢查
        npm run quality:check
        echo "✅ 綜合品質評估完成"

    - name: 上傳綜合品質報告
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-quality-report
        path: quality-reports/
        retention-days: 30

    - name: 生成品質檢查摘要
      if: always()
      run: |
        echo "## 📊 內容品質檢查摘要" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 檢查各項檢查結果
        echo "### 檢查結果" >> $GITHUB_STEP_SUMMARY
        echo "| 檢查項目 | 狀態 | 詳情 |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|------|------|" >> $GITHUB_STEP_SUMMARY
        
        # 基礎驗證
        if [ "${{ needs.basic-validation.result }}" = "success" ]; then
          echo "| 基礎驗證 | ✅ 通過 | Content Collections 和 Frontmatter 格式正確 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 基礎驗證 | ❌ 失敗 | 請檢查 Content Collections 或 Frontmatter 格式 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 醫療術語檢查
        if [ "${{ needs.terminology-check.result }}" = "success" ]; then
          echo "| 醫療術語檢查 | ✅ 通過 | 術語使用正確 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 醫療術語檢查 | ❌ 失敗 | 發現術語問題，請查看詳細報告 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 無障礙性驗證
        if [ "${{ needs.accessibility-check.result }}" = "success" ]; then
          echo "| 無障礙性驗證 | ✅ 通過 | 符合無障礙性標準 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 無障礙性驗證 | ❌ 失敗 | 發現無障礙性問題 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 可讀性分析
        if [ "${{ needs.readability-check.result }}" = "success" ]; then
          echo "| 可讀性分析 | ✅ 通過 | 內容可讀性良好 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 可讀性分析 | ⚠️ 警告 | 可讀性需要改善 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 參考文獻檢查
        if [ "${{ needs.references-check.result }}" = "success" ]; then
          echo "| 參考文獻檢查 | ✅ 通過 | 參考文獻格式正確 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 參考文獻檢查 | ❌ 失敗 | 參考文獻格式需要修正 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Markdown 語法檢查
        if [ "${{ needs.markdown-lint.result }}" = "success" ]; then
          echo "| Markdown 語法 | ✅ 通過 | 語法格式正確 |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Markdown 語法 | ❌ 失敗 | 發現語法錯誤 |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📄 詳細報告" >> $GITHUB_STEP_SUMMARY
        echo "請查看 Actions 產出的 Artifacts 以獲取詳細的品質檢查報告。" >> $GITHUB_STEP_SUMMARY
        
        # 如果是 PR，添加審核建議
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 👥 審核建議" >> $GITHUB_STEP_SUMMARY
          echo "- 請醫療專業審核者檢查內容準確性" >> $GITHUB_STEP_SUMMARY
          echo "- 請內容編輯者檢查語言表達和格式" >> $GITHUB_STEP_SUMMARY
          echo "- 請技術審核者確認所有自動化檢查通過" >> $GITHUB_STEP_SUMMARY
        fi

  # PR 評論和標籤
  pr-feedback:
    runs-on: ubuntu-latest
    needs: [basic-validation, terminology-check, accessibility-check, readability-check, references-check, markdown-lint, comprehensive-quality-check]
    if: always() && github.event_name == 'pull_request' && needs.basic-validation.outputs.has-content-changes == 'true'
    name: 💬 PR 回饋和標籤
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4

    - name: 下載綜合品質報告
      uses: actions/download-artifact@v3
      with:
        name: comprehensive-quality-report
        path: ./quality-reports

    - name: 生成 PR 評論
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // 讀取品質檢查結果
          let qualityScore = 0;
          let reportSummary = '';
          
          try {
            const reportPath = './quality-reports/comprehensive-quality-report.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              qualityScore = report.overallScore || 0;
              reportSummary = `總體品質分數: ${qualityScore}/100 (${report.qualityLevel?.label || '未知'})`;
            }
          } catch (error) {
            console.log('無法讀取品質報告:', error);
          }
          
          // 建立評論內容
          const comment = `## 🏥 醫療內容品質檢查結果
          
          ${reportSummary}
          
          ### 📋 檢查結果摘要
          
          | 檢查項目 | 狀態 |
          |---------|------|
          | 基礎驗證 | ${{ needs.basic-validation.result == 'success' ? '✅ 通過' : '❌ 失敗' }} |
          | 醫療術語檢查 | ${{ needs.terminology-check.result == 'success' ? '✅ 通過' : '❌ 失敗' }} |
          | 無障礙性驗證 | ${{ needs.accessibility-check.result == 'success' ? '✅ 通過' : '❌ 失敗' }} |
          | 可讀性分析 | ${{ needs.readability-check.result == 'success' ? '✅ 通過' : '⚠️ 需改善' }} |
          | 參考文獻檢查 | ${{ needs.references-check.result == 'success' ? '✅ 通過' : '❌ 失敗' }} |
          | Markdown 語法 | ${{ needs.markdown-lint.result == 'success' ? '✅ 通過' : '❌ 失敗' }} |
          
          ### 📊 品質評估
          
          ${qualityScore >= 90 ? '🏆 **優秀**: 內容品質極佳，符合所有標準' :
            qualityScore >= 75 ? '✅ **良好**: 內容品質良好，有少量改善空間' :
            qualityScore >= 60 ? '⚠️ **普通**: 內容品質普通，需要一些改善' :
            '❌ **需改善**: 內容品質需要大幅改善'}
          
          ### 📄 詳細報告
          
          請查看 GitHub Actions 的 Artifacts 部分下載詳細的品質檢查報告。
          
          ### 👥 審核建議
          
          - 🏥 **醫療審核**: 請相關專科醫師審核內容準確性
          - 📝 **編輯審核**: 請內容編輯者檢查語言表達和格式
          - 🔧 **技術審核**: 請確認所有自動化檢查通過
          
          ---
          
          *此評論由自動化品質檢查系統生成 🤖*`;
          
          // 發布評論
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: 添加 PR 標籤
      uses: actions/github-script@v6
      with:
        script: |
          const labels = ['content-quality-checked'];
          
          // 根據檢查結果添加標籤
          if ('${{ needs.basic-validation.result }}' !== 'success') {
            labels.push('needs-basic-fixes');
          }
          
          if ('${{ needs.terminology-check.result }}' !== 'success') {
            labels.push('needs-medical-review');
          }
          
          if ('${{ needs.accessibility-check.result }}' !== 'success') {
            labels.push('needs-accessibility-fixes');
          }
          
          if ('${{ needs.references-check.result }}' !== 'success') {
            labels.push('needs-reference-fixes');
          }
          
          if ('${{ needs.markdown-lint.result }}' !== 'success') {
            labels.push('needs-format-fixes');
          }
          
          // 添加品質等級標籤
          try {
            const fs = require('fs');
            const reportPath = './quality-reports/comprehensive-quality-report.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const score = report.overallScore || 0;
              
              if (score >= 90) labels.push('quality-excellent');
              else if (score >= 75) labels.push('quality-good');
              else if (score >= 60) labels.push('quality-fair');
              else labels.push('quality-needs-improvement');
            }
          } catch (error) {
            console.log('無法讀取品質報告:', error);
          }
          
          // 應用標籤
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: labels
          });

  # 通知相關人員
  notify-reviewers:
    runs-on: ubuntu-latest
    needs: [comprehensive-quality-check]
    if: always() && github.event_name == 'pull_request' && needs.basic-validation.outputs.has-content-changes == 'true'
    name: 📢 通知審核者
    
    steps:
    - name: 通知專科審核者
      uses: actions/github-script@v6
      with:
        script: |
          // 根據變更的檔案內容判斷需要通知的專科審核者
          const changedFiles = ${{ needs.basic-validation.outputs.changed-files }};
          const reviewers = new Set();
          
          changedFiles.forEach(file => {
            if (file.includes('cardiology')) reviewers.add('cardiology-reviewer');
            if (file.includes('neurology')) reviewers.add('neurology-reviewer');
            if (file.includes('pediatrics')) reviewers.add('pediatrics-reviewer');
            if (file.includes('emergency')) reviewers.add('emergency-reviewer');
            if (file.includes('orthopedics')) reviewers.add('orthopedics-reviewer');
          });
          
          // 總是添加一般醫療審核者
          reviewers.add('medical-advisors');
          reviewers.add('content-manager');
          
          if (reviewers.size > 0) {
            github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: Array.from(reviewers)
            });
          }