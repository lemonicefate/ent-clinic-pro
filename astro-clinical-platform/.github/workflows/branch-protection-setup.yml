name: 分支保護設定

# 此工作流程用於設定和維護分支保護規則
# 只在管理員手動觸發時執行

on:
  workflow_dispatch:
    inputs:
      action:
        description: '執行動作'
        required: true
        default: 'setup'
        type: choice
        options:
        - setup
        - update
        - check
      branch:
        description: '目標分支'
        required: true
        default: 'main'
        type: string

jobs:
  setup-branch-protection:
    runs-on: ubuntu-latest
    name: 設定分支保護
    if: github.event.inputs.action == 'setup' || github.event.inputs.action == 'update'
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定分支保護規則
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const branch = '${{ github.event.inputs.branch }}';
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          console.log(`設定分支保護規則: ${owner}/${repo}/${branch}`);
          
          try {
            // 設定分支保護規則
            const protection = await github.rest.repos.updateBranchProtection({
              owner: owner,
              repo: repo,
              branch: branch,
              required_status_checks: {
                strict: true,
                contexts: [
                  '格式驗證',
                  '內容品質檢查', 
                  'SEO 和無障礙性檢查',
                  '專科驗證',
                  '狀態檢查'
                ]
              },
              enforce_admins: false,
              required_pull_request_reviews: {
                required_approving_review_count: 2,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                require_last_push_approval: true
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false,
              block_creations: false,
              required_conversation_resolution: true
            });
            
            console.log('✅ 分支保護規則設定成功');
            console.log(JSON.stringify(protection.data, null, 2));
            
          } catch (error) {
            console.error('❌ 設定分支保護規則失敗:', error.message);
            throw error;
          }

  check-branch-protection:
    runs-on: ubuntu-latest
    name: 檢查分支保護
    if: github.event.inputs.action == 'check'
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 檢查分支保護狀態
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const branch = '${{ github.event.inputs.branch }}';
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          console.log(`檢查分支保護狀態: ${owner}/${repo}/${branch}`);
          
          try {
            const protection = await github.rest.repos.getBranchProtection({
              owner: owner,
              repo: repo,
              branch: branch
            });
            
            console.log('✅ 分支保護規則狀態:');
            console.log('- 必要狀態檢查:', protection.data.required_status_checks?.contexts || []);
            console.log('- 必要審核數量:', protection.data.required_pull_request_reviews?.required_approving_review_count || 0);
            console.log('- 需要程式碼擁有者審核:', protection.data.required_pull_request_reviews?.require_code_owner_reviews || false);
            console.log('- 強制管理員:', protection.data.enforce_admins?.enabled || false);
            console.log('- 允許強制推送:', protection.data.allow_force_pushes?.enabled || false);
            console.log('- 允許刪除:', protection.data.allow_deletions?.enabled || false);
            
          } catch (error) {
            if (error.status === 404) {
              console.log('⚠️ 分支保護規則未設定');
            } else {
              console.error('❌ 檢查分支保護規則失敗:', error.message);
              throw error;
            }
          }

  setup-team-permissions:
    runs-on: ubuntu-latest
    name: 設定團隊權限
    if: github.event.inputs.action == 'setup'
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 檢查團隊權限設定
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          console.log('檢查團隊權限設定...');
          
          // 定義需要的團隊和權限
          const teams = [
            { name: 'admin-team', permission: 'admin' },
            { name: 'dev-team', permission: 'maintain' },
            { name: 'medical-content-team', permission: 'write' },
            { name: 'clinical-reviewers', permission: 'write' },
            { name: 'cms-admin-team', permission: 'write' },
            { name: 'cardiology-team', permission: 'triage' },
            { name: 'neurology-team', permission: 'triage' },
            { name: 'pediatrics-team', permission: 'triage' },
            { name: 'emergency-team', permission: 'triage' },
            { name: 'orthopedics-team', permission: 'triage' },
            { name: 'zh-tw-reviewers', permission: 'triage' },
            { name: 'en-reviewers', permission: 'triage' }
          ];
          
          for (const team of teams) {
            try {
              console.log(`檢查團隊: ${team.name}`);
              
              // 檢查團隊是否存在
              const teamInfo = await github.rest.teams.getByName({
                org: owner,
                team_slug: team.name
              });
              
              console.log(`✅ 團隊 ${team.name} 存在`);
              
              // 檢查團隊對儲存庫的權限
              try {
                const teamRepo = await github.rest.teams.checkPermissionsForRepoInOrg({
                  org: owner,
                  team_slug: team.name,
                  owner: owner,
                  repo: repo
                });
                
                console.log(`✅ 團隊 ${team.name} 已有儲存庫權限: ${teamRepo.data.permission}`);
                
              } catch (repoError) {
                if (repoError.status === 404) {
                  console.log(`⚠️ 團隊 ${team.name} 沒有儲存庫權限，建議手動設定`);
                } else {
                  console.error(`❌ 檢查團隊 ${team.name} 權限失敗:`, repoError.message);
                }
              }
              
            } catch (error) {
              if (error.status === 404) {
                console.log(`⚠️ 團隊 ${team.name} 不存在，建議手動建立`);
              } else {
                console.error(`❌ 檢查團隊 ${team.name} 失敗:`, error.message);
              }
            }
          }
          
          console.log('團隊權限檢查完成');

  notify-setup-complete:
    runs-on: ubuntu-latest
    name: 通知設定完成
    needs: [setup-branch-protection, check-branch-protection, setup-team-permissions]
    if: always()
    
    steps:
    - name: 設定結果摘要
      run: |
        echo "## 分支保護設定結果"
        echo "執行動作: ${{ github.event.inputs.action }}"
        echo "目標分支: ${{ github.event.inputs.branch }}"
        echo ""
        
        if [ "${{ github.event.inputs.action }}" = "setup" ] || [ "${{ github.event.inputs.action }}" = "update" ]; then
          echo "- 分支保護設定: ${{ needs.setup-branch-protection.result }}"
          echo "- 團隊權限檢查: ${{ needs.setup-team-permissions.result }}"
        elif [ "${{ github.event.inputs.action }}" = "check" ]; then
          echo "- 分支保護檢查: ${{ needs.check-branch-protection.result }}"
        fi
        
        echo ""
        echo "### 後續手動設定項目"
        echo "1. 確認所有團隊都已建立並分配適當權限"
        echo "2. 檢查 CODEOWNERS 檔案中的團隊名稱是否正確"
        echo "3. 測試 Pull Request 工作流程"
        echo "4. 設定 Decap CMS 的 GitHub OAuth 應用程式"