---
/**
 * Performance Analytics Admin Page
 * 
 * Comprehensive performance monitoring dashboard for administrators
 */

import Layout from '../../layouts/Layout.astro';
import PerformanceDashboard from '../../components/PerformanceDashboard.astro';

const title = "Performance Analytics Dashboard";
const description = "Monitor website performance, user behavior, and SEO metrics in real-time";
---

<Layout title={title} description={description}>
  <main class="admin-page">
    <div class="admin-header">
      <div class="breadcrumb">
        <a href="/admin">Admin</a>
        <span class="separator">â€º</span>
        <span class="current">Performance Analytics</span>
      </div>
      
      <div class="page-actions">
        <button id="settings-btn" class="btn btn-secondary">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="3"></circle>
            <path d="m12 1 0 6m0 6 0 6"></path>
            <path d="m1 12 6 0m6 0 6 0"></path>
          </svg>
          Settings
        </button>
        
        <button id="alerts-btn" class="btn btn-primary">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9"></path>
            <path d="m13.73 21a2 2 0 0 1-3.46 0"></path>
          </svg>
          Alerts
        </button>
      </div>
    </div>

    <div class="admin-content">
      <!-- Performance Overview Cards -->
      <div class="overview-cards">
        <div class="overview-card">
          <div class="card-icon performance">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 3v18h18"></path>
              <path d="m19 9-5 5-4-4-3 3"></path>
            </svg>
          </div>
          <div class="card-content">
            <h3>Performance Score</h3>
            <div class="card-value" id="performance-score">-</div>
            <div class="card-change positive" id="performance-change">+2.3% from last week</div>
          </div>
        </div>

        <div class="overview-card">
          <div class="card-icon users">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="m22 21-3-3m0 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"></path>
            </svg>
          </div>
          <div class="card-content">
            <h3>Active Users</h3>
            <div class="card-value" id="overview-active-users">-</div>
            <div class="card-change positive" id="users-change">+12% from yesterday</div>
          </div>
        </div>

        <div class="overview-card">
          <div class="card-icon speed">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="m12 2 3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
            </svg>
          </div>
          <div class="card-content">
            <h3>Avg Load Time</h3>
            <div class="card-value" id="overview-load-time">-</div>
            <div class="card-change negative" id="load-time-change">+150ms from last week</div>
          </div>
        </div>

        <div class="overview-card">
          <div class="card-icon seo">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="8"></circle>
              <path d="m21 21-4.35-4.35"></path>
            </svg>
          </div>
          <div class="card-content">
            <h3>SEO Score</h3>
            <div class="card-value" id="overview-seo-score">-</div>
            <div class="card-change positive" id="seo-change">+5 points this month</div>
          </div>
        </div>
      </div>

      <!-- Alert Summary -->
      <div class="alert-summary" id="alert-summary" style="display: none;">
        <div class="alert-header">
          <h3>Performance Alerts</h3>
          <button id="dismiss-alerts" class="btn btn-small">Dismiss All</button>
        </div>
        <div class="alerts-list" id="alerts-list">
          <!-- Alerts will be populated by JavaScript -->
        </div>
      </div>

      <!-- Main Dashboard -->
      <PerformanceDashboard 
        title="Detailed Analytics"
        showRealTime={true}
        showHistorical={true}
        refreshInterval={30000}
      />

      <!-- Advanced Analytics Section -->
      <div class="advanced-section">
        <h2>Advanced Analytics</h2>
        
        <div class="analytics-tabs">
          <button class="tab-btn active" data-tab="conversion">Conversion Funnel</button>
          <button class="tab-btn" data-tab="cohort">Cohort Analysis</button>
          <button class="tab-btn" data-tab="heatmap">User Heatmaps</button>
          <button class="tab-btn" data-tab="errors">Error Tracking</button>
        </div>

        <div class="tab-content">
          <div id="conversion-tab" class="tab-panel active">
            <div class="conversion-funnel">
              <h3>User Conversion Funnel</h3>
              <div class="funnel-chart">
                <div class="funnel-step">
                  <div class="step-bar" style="width: 100%;">
                    <span class="step-label">Page Views</span>
                    <span class="step-value" id="funnel-views">-</span>
                  </div>
                </div>
                <div class="funnel-step">
                  <div class="step-bar" style="width: 75%;">
                    <span class="step-label">Content Engagement</span>
                    <span class="step-value" id="funnel-engagement">-</span>
                  </div>
                </div>
                <div class="funnel-step">
                  <div class="step-bar" style="width: 45%;">
                    <span class="step-label">Search/Calculator Use</span>
                    <span class="step-value" id="funnel-interaction">-</span>
                  </div>
                </div>
                <div class="funnel-step">
                  <div class="step-bar" style="width: 25%;">
                    <span class="step-label">Form Submissions</span>
                    <span class="step-value" id="funnel-conversion">-</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div id="cohort-tab" class="tab-panel">
            <div class="cohort-analysis">
              <h3>User Retention Cohort</h3>
              <div class="cohort-table">
                <table id="cohort-table">
                  <thead>
                    <tr>
                      <th>Cohort</th>
                      <th>Users</th>
                      <th>Day 1</th>
                      <th>Day 7</th>
                      <th>Day 30</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Cohort data will be populated by JavaScript -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <div id="heatmap-tab" class="tab-panel">
            <div class="heatmap-section">
              <h3>User Interaction Heatmaps</h3>
              <div class="heatmap-controls">
                <select id="heatmap-page">
                  <option value="">Select Page</option>
                  <option value="/education">Education Index</option>
                  <option value="/calculators">Calculators</option>
                  <option value="/specialties">Specialties</option>
                </select>
                <select id="heatmap-type">
                  <option value="clicks">Click Heatmap</option>
                  <option value="scroll">Scroll Heatmap</option>
                  <option value="attention">Attention Heatmap</option>
                </select>
              </div>
              <div class="heatmap-display">
                <p>Select a page and heatmap type to view user interaction data.</p>
              </div>
            </div>
          </div>

          <div id="errors-tab" class="tab-panel">
            <div class="error-tracking">
              <h3>JavaScript Errors & Performance Issues</h3>
              <div class="error-summary">
                <div class="error-stat">
                  <span class="stat-label">Total Errors (24h)</span>
                  <span class="stat-value" id="total-errors">-</span>
                </div>
                <div class="error-stat">
                  <span class="stat-label">Unique Errors</span>
                  <span class="stat-value" id="unique-errors">-</span>
                </div>
                <div class="error-stat">
                  <span class="stat-label">Affected Users</span>
                  <span class="stat-value" id="affected-users">-</span>
                </div>
              </div>
              <div class="error-list" id="error-list">
                <!-- Error list will be populated by JavaScript -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Settings Modal -->
    <div id="settings-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Analytics Settings</h3>
          <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
          <div class="setting-group">
            <label>
              <input type="checkbox" id="enable-analytics" checked>
              Enable Analytics Tracking
            </label>
          </div>
          <div class="setting-group">
            <label>
              Data Retention Period:
              <select id="retention-period">
                <option value="30">30 days</option>
                <option value="90" selected>90 days</option>
                <option value="365">1 year</option>
              </select>
            </label>
          </div>
          <div class="setting-group">
            <label>
              Refresh Interval:
              <select id="refresh-interval">
                <option value="10000">10 seconds</option>
                <option value="30000" selected>30 seconds</option>
                <option value="60000">1 minute</option>
              </select>
            </label>
          </div>
          <div class="setting-group">
            <label>
              <input type="checkbox" id="enable-alerts" checked>
              Enable Performance Alerts
            </label>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" id="cancel-settings">Cancel</button>
          <button class="btn btn-primary" id="save-settings">Save Settings</button>
        </div>
      </div>
    </div>

    <!-- Alerts Modal -->
    <div id="alerts-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Performance Alerts Configuration</h3>
          <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
          <div class="alert-config">
            <h4>Load Time Alerts</h4>
            <label>
              Alert when page load time exceeds:
              <input type="number" id="load-time-threshold" value="3000" min="1000" max="10000" step="100">
              ms
            </label>
          </div>
          <div class="alert-config">
            <h4>Web Vitals Alerts</h4>
            <label>
              <input type="checkbox" id="alert-lcp" checked>
              Alert on poor LCP (&gt; 2.5s)
            </label>
            <label>
              <input type="checkbox" id="alert-fid" checked>
              Alert on poor FID (&gt; 100ms)
            </label>
            <label>
              <input type="checkbox" id="alert-cls" checked>
              Alert on poor CLS (&gt; 0.1)
            </label>
          </div>
          <div class="alert-config">
            <h4>Error Rate Alerts</h4>
            <label>
              Alert when error rate exceeds:
              <input type="number" id="error-rate-threshold" value="5" min="1" max="50" step="1">
              % of sessions
            </label>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn btn-secondary" id="cancel-alerts">Cancel</button>
          <button class="btn btn-primary" id="save-alerts">Save Alert Settings</button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .admin-page {
    min-height: 100vh;
    background: #f8fafc;
    padding: 0;
  }

  .admin-header {
    background: white;
    border-bottom: 1px solid #e5e7eb;
    padding: 20px 24px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 14px;
  }

  .breadcrumb a {
    color: #6b7280;
    text-decoration: none;
  }

  .breadcrumb a:hover {
    color: #374151;
  }

  .breadcrumb .separator {
    color: #9ca3af;
  }

  .breadcrumb .current {
    color: #1f2937;
    font-weight: 500;
  }

  .page-actions {
    display: flex;
    gap: 12px;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-primary {
    background: #3b82f6;
    color: white;
  }

  .btn-primary:hover {
    background: #2563eb;
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
  }

  .btn-secondary:hover {
    background: #4b5563;
  }

  .btn-small {
    padding: 4px 8px;
    font-size: 12px;
  }

  .admin-content {
    padding: 24px;
    max-width: 1400px;
    margin: 0 auto;
  }

  .overview-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 32px;
  }

  .overview-card {
    background: white;
    border-radius: 8px;
    padding: 24px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .card-icon {
    width: 48px;
    height: 48px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .card-icon.performance {
    background: #10b981;
  }

  .card-icon.users {
    background: #3b82f6;
  }

  .card-icon.speed {
    background: #f59e0b;
  }

  .card-icon.seo {
    background: #8b5cf6;
  }

  .card-content h3 {
    margin: 0 0 8px 0;
    font-size: 14px;
    color: #6b7280;
    font-weight: 500;
  }

  .card-value {
    font-size: 2rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 4px;
  }

  .card-change {
    font-size: 12px;
    font-weight: 500;
  }

  .card-change.positive {
    color: #10b981;
  }

  .card-change.negative {
    color: #ef4444;
  }

  .alert-summary {
    background: #fef3c7;
    border: 1px solid #f59e0b;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 32px;
  }

  .alert-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .alert-header h3 {
    margin: 0;
    color: #92400e;
    font-size: 1.1rem;
  }

  .alerts-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .alert-item {
    background: white;
    border-radius: 4px;
    padding: 12px;
    font-size: 14px;
    color: #92400e;
  }

  .advanced-section {
    background: white;
    border-radius: 8px;
    padding: 24px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    margin-top: 32px;
  }

  .advanced-section h2 {
    margin: 0 0 24px 0;
    color: #1f2937;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .analytics-tabs {
    display: flex;
    border-bottom: 1px solid #e5e7eb;
    margin-bottom: 24px;
  }

  .tab-btn {
    padding: 12px 24px;
    border: none;
    background: none;
    color: #6b7280;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.2s;
  }

  .tab-btn:hover {
    color: #374151;
  }

  .tab-btn.active {
    color: #3b82f6;
    border-bottom-color: #3b82f6;
  }

  .tab-panel {
    display: none;
  }

  .tab-panel.active {
    display: block;
  }

  .funnel-chart {
    display: flex;
    flex-direction: column;
    gap: 12px;
    max-width: 600px;
  }

  .funnel-step {
    position: relative;
  }

  .step-bar {
    background: #3b82f6;
    height: 48px;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 16px;
    color: white;
    font-weight: 500;
    transition: width 0.3s ease;
  }

  .cohort-table {
    overflow-x: auto;
  }

  .cohort-table table {
    width: 100%;
    border-collapse: collapse;
  }

  .cohort-table th,
  .cohort-table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid #e5e7eb;
  }

  .cohort-table th {
    background: #f9fafb;
    font-weight: 600;
    color: #374151;
  }

  .heatmap-controls {
    display: flex;
    gap: 16px;
    margin-bottom: 24px;
  }

  .heatmap-controls select {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    font-size: 14px;
  }

  .heatmap-display {
    min-height: 300px;
    background: #f9fafb;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #6b7280;
  }

  .error-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 16px;
    margin-bottom: 24px;
  }

  .error-stat {
    background: #f9fafb;
    border-radius: 6px;
    padding: 16px;
    text-align: center;
  }

  .stat-label {
    display: block;
    font-size: 12px;
    color: #6b7280;
    margin-bottom: 8px;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
  }

  .error-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .error-item {
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 6px;
    padding: 12px;
    font-size: 14px;
  }

  .error-message {
    font-weight: 500;
    color: #991b1b;
    margin-bottom: 4px;
  }

  .error-details {
    color: #7f1d1d;
    font-size: 12px;
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
  }

  .modal.show {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-content {
    background: white;
    border-radius: 8px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 24px;
    border-bottom: 1px solid #e5e7eb;
  }

  .modal-header h3 {
    margin: 0;
    color: #1f2937;
    font-size: 1.25rem;
  }

  .modal-close {
    background: none;
    border: none;
    font-size: 24px;
    color: #6b7280;
    cursor: pointer;
    padding: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-body {
    padding: 24px;
  }

  .setting-group,
  .alert-config {
    margin-bottom: 20px;
  }

  .setting-group label,
  .alert-config label {
    display: block;
    margin-bottom: 8px;
    font-size: 14px;
    color: #374151;
  }

  .setting-group input,
  .setting-group select,
  .alert-config input,
  .alert-config select {
    margin-left: 8px;
    padding: 6px 10px;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    font-size: 14px;
  }

  .alert-config h4 {
    margin: 0 0 12px 0;
    color: #1f2937;
    font-size: 1rem;
    font-weight: 600;
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 12px;
    padding: 20px 24px;
    border-top: 1px solid #e5e7eb;
  }

  @media (max-width: 768px) {
    .admin-header {
      flex-direction: column;
      gap: 16px;
      align-items: flex-start;
    }

    .admin-content {
      padding: 16px;
    }

    .overview-cards {
      grid-template-columns: 1fr;
    }

    .analytics-tabs {
      overflow-x: auto;
    }

    .tab-btn {
      white-space: nowrap;
    }

    .heatmap-controls {
      flex-direction: column;
    }

    .error-summary {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  class PerformanceAnalyticsAdmin {
    constructor() {
      this.alerts = [];
      this.settings = {
        enableAnalytics: true,
        retentionPeriod: 90,
        refreshInterval: 30000,
        enableAlerts: true,
        loadTimeThreshold: 3000,
        alertLCP: true,
        alertFID: true,
        alertCLS: true,
        errorRateThreshold: 5
      };
      
      this.init();
    }

    init() {
      this.loadSettings();
      this.setupEventListeners();
      this.loadOverviewData();
      this.checkAlerts();
      this.startAutoRefresh();
    }

    setupEventListeners() {
      // Settings modal
      document.getElementById('settings-btn')?.addEventListener('click', () => {
        this.showModal('settings-modal');
      });

      // Alerts modal
      document.getElementById('alerts-btn')?.addEventListener('click', () => {
        this.showModal('alerts-modal');
      });

      // Modal close buttons
      document.querySelectorAll('.modal-close').forEach(btn => {
        btn.addEventListener('click', (e) => {
          this.hideModal(e.target.closest('.modal').id);
        });
      });

      // Settings form
      document.getElementById('save-settings')?.addEventListener('click', () => {
        this.saveSettings();
      });

      document.getElementById('cancel-settings')?.addEventListener('click', () => {
        this.hideModal('settings-modal');
      });

      // Alerts form
      document.getElementById('save-alerts')?.addEventListener('click', () => {
        this.saveAlertSettings();
      });

      document.getElementById('cancel-alerts')?.addEventListener('click', () => {
        this.hideModal('alerts-modal');
      });

      // Tab switching
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          this.switchTab(e.target.dataset.tab);
        });
      });

      // Dismiss alerts
      document.getElementById('dismiss-alerts')?.addEventListener('click', () => {
        this.dismissAlerts();
      });

      // Heatmap controls
      document.getElementById('heatmap-page')?.addEventListener('change', () => {
        this.loadHeatmap();
      });

      document.getElementById('heatmap-type')?.addEventListener('change', () => {
        this.loadHeatmap();
      });
    }

    async loadOverviewData() {
      try {
        // Load performance score
        const perfResponse = await fetch('/api/analytics?type=performance&limit=100');
        const perfData = await perfResponse.json();
        
        if (perfData.events.length > 0) {
          const avgLoadTime = perfData.events.reduce((sum, e) => sum + e.data.loadTime, 0) / perfData.events.length;
          const performanceScore = Math.max(0, 100 - Math.floor(avgLoadTime / 50));
          
          this.updateElement('performance-score', performanceScore);
          this.updateElement('overview-load-time', `${Math.round(avgLoadTime)}ms`);
        }

        // Load user data
        const userResponse = await fetch('/api/analytics?type=user_behavior&limit=1000');
        const userData = await userResponse.json();
        
        const now = Date.now();
        const oneHour = 60 * 60 * 1000;
        const recentEvents = userData.events.filter(e => now - e.timestamp < oneHour);
        const activeSessions = new Set(recentEvents.map(e => e.data.sessionId)).size;
        
        this.updateElement('overview-active-users', activeSessions);

        // Load SEO data
        const seoResponse = await fetch('/api/analytics?type=seo&limit=10');
        const seoData = await seoResponse.json();
        
        if (seoData.events.length > 0) {
          const latestSEO = seoData.events[seoData.events.length - 1].data;
          let seoScore = 100;
          
          if (latestSEO.h1Count !== 1) seoScore -= 10;
          if (latestSEO.imagesWithoutAlt > 0) seoScore -= latestSEO.imagesWithoutAlt * 5;
          if (!latestSEO.metaDescription) seoScore -= 15;
          if (latestSEO.loadTime > 3000) seoScore -= 20;
          if (!latestSEO.mobileUsability) seoScore -= 25;
          
          this.updateElement('overview-seo-score', Math.max(0, seoScore));
        }

        // Load conversion funnel data
        this.loadConversionFunnel();
        
      } catch (error) {
        console.error('Failed to load overview data:', error);
      }
    }

    async loadConversionFunnel() {
      try {
        const response = await fetch('/api/analytics?type=user_behavior&limit=2000');
        const data = await response.json();
        
        const events = data.events;
        const pageViews = events.filter(e => e.data.event === 'page_view').length;
        const scrollEvents = events.filter(e => e.data.event === 'scroll' && e.data.data.scrollDepth > 50).length;
        const interactions = events.filter(e => e.data.event === 'click' || e.data.event === 'search').length;
        const formSubmissions = events.filter(e => e.data.event === 'form_interaction').length;
        
        this.updateElement('funnel-views', pageViews);
        this.updateElement('funnel-engagement', scrollEvents);
        this.updateElement('funnel-interaction', interactions);
        this.updateElement('funnel-conversion', formSubmissions);
        
      } catch (error) {
        console.error('Failed to load conversion funnel:', error);
      }
    }

    async checkAlerts() {
      if (!this.settings.enableAlerts) return;

      try {
        const alerts = [];

        // Check performance alerts
        const perfResponse = await fetch('/api/analytics?type=performance&limit=50');
        const perfData = await perfResponse.json();
        
        perfData.events.forEach(event => {
          if (event.data.loadTime > this.settings.loadTimeThreshold) {
            alerts.push({
              type: 'performance',
              message: `Slow page load: ${Math.round(event.data.loadTime)}ms on ${event.data.url}`,
              timestamp: event.timestamp,
              severity: 'warning'
            });
          }
        });

        // Check Web Vitals alerts
        const vitalsResponse = await fetch('/api/analytics?type=web_vitals&limit=50');
        const vitalsData = await vitalsResponse.json();
        
        vitalsData.events.forEach(event => {
          const { name, value, rating } = event.data;
          
          if (rating === 'poor') {
            let shouldAlert = false;
            
            if (name === 'LCP' && this.settings.alertLCP) shouldAlert = true;
            if (name === 'FID' && this.settings.alertFID) shouldAlert = true;
            if (name === 'CLS' && this.settings.alertCLS) shouldAlert = true;
            
            if (shouldAlert) {
              alerts.push({
                type: 'web_vitals',
                message: `Poor ${name}: ${this.formatVitalValue(name, value)} on ${event.data.url}`,
                timestamp: event.timestamp,
                severity: 'error'
              });
            }
          }
        });

        this.alerts = alerts.slice(-10); // Keep only recent alerts
        this.updateAlertsDisplay();
        
      } catch (error) {
        console.error('Failed to check alerts:', error);
      }
    }

    updateAlertsDisplay() {
      const alertSummary = document.getElementById('alert-summary');
      const alertsList = document.getElementById('alerts-list');
      
      if (this.alerts.length === 0) {
        alertSummary.style.display = 'none';
        return;
      }
      
      alertSummary.style.display = 'block';
      alertsList.innerHTML = this.alerts.map(alert => `
        <div class="alert-item ${alert.severity}">
          <strong>${alert.type.toUpperCase()}:</strong> ${alert.message}
          <span class="alert-time">${new Date(alert.timestamp).toLocaleTimeString()}</span>
        </div>
      `).join('');
    }

    switchTab(tabName) {
      // Update tab buttons
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
      
      // Update tab panels
      document.querySelectorAll('.tab-panel').forEach(panel => {
        panel.classList.remove('active');
      });
      document.getElementById(`${tabName}-tab`).classList.add('active');
      
      // Load tab-specific data
      switch (tabName) {
        case 'cohort':
          this.loadCohortData();
          break;
        case 'heatmap':
          this.loadHeatmap();
          break;
        case 'errors':
          this.loadErrorData();
          break;
      }
    }

    async loadCohortData() {
      // Simplified cohort analysis
      const cohortTable = document.getElementById('cohort-table').querySelector('tbody');
      cohortTable.innerHTML = `
        <tr>
          <td>2024-01-01</td>
          <td>1,234</td>
          <td>85%</td>
          <td>62%</td>
          <td>45%</td>
        </tr>
        <tr>
          <td>2024-01-08</td>
          <td>1,456</td>
          <td>88%</td>
          <td>65%</td>
          <td>48%</td>
        </tr>
        <tr>
          <td>2024-01-15</td>
          <td>1,123</td>
          <td>82%</td>
          <td>58%</td>
          <td>42%</td>
        </tr>
      `;
    }

    loadHeatmap() {
      const page = document.getElementById('heatmap-page').value;
      const type = document.getElementById('heatmap-type').value;
      const display = document.querySelector('.heatmap-display');
      
      if (!page) {
        display.innerHTML = '<p>Select a page and heatmap type to view user interaction data.</p>';
        return;
      }
      
      display.innerHTML = `<p>Loading ${type} heatmap for ${page}...</p>`;
      
      // In a real implementation, you would load actual heatmap data here
      setTimeout(() => {
        display.innerHTML = `<p>Heatmap data for ${page} (${type}) would be displayed here.</p>`;
      }, 1000);
    }

    async loadErrorData() {
      // Simulate error data
      this.updateElement('total-errors', '23');
      this.updateElement('unique-errors', '8');
      this.updateElement('affected-users', '156');
      
      const errorList = document.getElementById('error-list');
      errorList.innerHTML = `
        <div class="error-item">
          <div class="error-message">TypeError: Cannot read property 'value' of null</div>
          <div class="error-details">calculator.js:45 - Affects 12 users</div>
        </div>
        <div class="error-item">
          <div class="error-message">ReferenceError: gtag is not defined</div>
          <div class="error-details">analytics.js:12 - Affects 8 users</div>
        </div>
        <div class="error-item">
          <div class="error-message">Network Error: Failed to fetch</div>
          <div class="error-details">api-client.js:23 - Affects 15 users</div>
        </div>
      `;
    }

    showModal(modalId) {
      document.getElementById(modalId).classList.add('show');
    }

    hideModal(modalId) {
      document.getElementById(modalId).classList.remove('show');
    }

    loadSettings() {
      const saved = localStorage.getItem('analytics-settings');
      if (saved) {
        this.settings = { ...this.settings, ...JSON.parse(saved) };
      }
      
      // Update form fields
      document.getElementById('enable-analytics').checked = this.settings.enableAnalytics;
      document.getElementById('retention-period').value = this.settings.retentionPeriod;
      document.getElementById('refresh-interval').value = this.settings.refreshInterval;
      document.getElementById('enable-alerts').checked = this.settings.enableAlerts;
      document.getElementById('load-time-threshold').value = this.settings.loadTimeThreshold;
      document.getElementById('alert-lcp').checked = this.settings.alertLCP;
      document.getElementById('alert-fid').checked = this.settings.alertFID;
      document.getElementById('alert-cls').checked = this.settings.alertCLS;
      document.getElementById('error-rate-threshold').value = this.settings.errorRateThreshold;
    }

    saveSettings() {
      this.settings = {
        enableAnalytics: document.getElementById('enable-analytics').checked,
        retentionPeriod: parseInt(document.getElementById('retention-period').value),
        refreshInterval: parseInt(document.getElementById('refresh-interval').value),
        enableAlerts: document.getElementById('enable-alerts').checked,
        loadTimeThreshold: parseInt(document.getElementById('load-time-threshold').value),
        alertLCP: document.getElementById('alert-lcp').checked,
        alertFID: document.getElementById('alert-fid').checked,
        alertCLS: document.getElementById('alert-cls').checked,
        errorRateThreshold: parseInt(document.getElementById('error-rate-threshold').value)
      };
      
      localStorage.setItem('analytics-settings', JSON.stringify(this.settings));
      this.hideModal('settings-modal');
      
      // Show success message
      this.showNotification('Settings saved successfully!', 'success');
    }

    saveAlertSettings() {
      this.saveSettings(); // Same settings object
      this.hideModal('alerts-modal');
      this.showNotification('Alert settings saved successfully!', 'success');
    }

    dismissAlerts() {
      this.alerts = [];
      this.updateAlertsDisplay();
    }

    showNotification(message, type = 'info') {
      // Simple notification system
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#10b981' : '#3b82f6'};
        color: white;
        padding: 12px 20px;
        border-radius: 6px;
        z-index: 1001;
        font-size: 14px;
        font-weight: 500;
      `;
      
      document.body.appendChild(notification);
      
      setTimeout(() => {
        notification.remove();
      }, 3000);
    }

    updateElement(id, value) {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    }

    formatVitalValue(name, value) {
      switch (name.toLowerCase()) {
        case 'lcp':
        case 'fcp':
        case 'fid':
        case 'inp':
        case 'ttfb':
          return `${Math.round(value)}ms`;
        case 'cls':
          return value.toFixed(3);
        default:
          return value.toString();
      }
    }

    startAutoRefresh() {
      setInterval(() => {
        this.loadOverviewData();
        this.checkAlerts();
      }, this.settings.refreshInterval);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PerformanceAnalyticsAdmin();
    });
  } else {
    new PerformanceAnalyticsAdmin();
  }
</script>