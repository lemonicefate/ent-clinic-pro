---
/**
 * Performance Dashboard Component
 * 
 * Displays real-time performance metrics and analytics data
 */

interface Props {
  title?: string;
  showRealTime?: boolean;
  showHistorical?: boolean;
  refreshInterval?: number;
}

const { 
  title = "Performance Dashboard",
  showRealTime = true,
  showHistorical = true,
  refreshInterval = 30000 // 30 seconds
} = Astro.props;
---

<div class="performance-dashboard">
  <div class="dashboard-header">
    <h2>{title}</h2>
    <div class="dashboard-controls">
      <button id="refresh-btn" class="btn btn-primary">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="23 4 23 10 17 10"></polyline>
          <polyline points="1 20 1 14 7 14"></polyline>
          <path d="m3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"></path>
        </svg>
        Refresh
      </button>
      <button id="export-btn" class="btn btn-secondary">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
          <polyline points="7 10 12 15 17 10"></polyline>
          <line x1="12" y1="15" x2="12" y2="3"></line>
        </svg>
        Export
      </button>
    </div>
  </div>

  {showRealTime && (
    <div class="dashboard-section">
      <h3>Real-time Metrics</h3>
      <div class="metrics-grid">
        <div class="metric-card" id="active-users-card">
          <div class="metric-value" id="active-users">-</div>
          <div class="metric-label">Active Users</div>
          <div class="metric-trend" id="active-users-trend"></div>
        </div>
        
        <div class="metric-card" id="page-views-card">
          <div class="metric-value" id="page-views">-</div>
          <div class="metric-label">Page Views (Last Hour)</div>
          <div class="metric-trend" id="page-views-trend"></div>
        </div>
        
        <div class="metric-card" id="avg-load-time-card">
          <div class="metric-value" id="avg-load-time">-</div>
          <div class="metric-label">Avg Load Time</div>
          <div class="metric-trend" id="load-time-trend"></div>
        </div>
        
        <div class="metric-card" id="bounce-rate-card">
          <div class="metric-value" id="bounce-rate">-</div>
          <div class="metric-label">Bounce Rate</div>
          <div class="metric-trend" id="bounce-rate-trend"></div>
        </div>
      </div>
    </div>
  )}

  <div class="dashboard-section">
    <h3>Web Vitals</h3>
    <div class="web-vitals-grid">
      <div class="vital-card" id="lcp-card">
        <div class="vital-header">
          <span class="vital-name">LCP</span>
          <span class="vital-status" id="lcp-status">-</span>
        </div>
        <div class="vital-value" id="lcp-value">-</div>
        <div class="vital-description">Largest Contentful Paint</div>
        <div class="vital-threshold">Good: &lt; 2.5s</div>
      </div>
      
      <div class="vital-card" id="fid-card">
        <div class="vital-header">
          <span class="vital-name">FID</span>
          <span class="vital-status" id="fid-status">-</span>
        </div>
        <div class="vital-value" id="fid-value">-</div>
        <div class="vital-description">First Input Delay</div>
        <div class="vital-threshold">Good: &lt; 100ms</div>
      </div>
      
      <div class="vital-card" id="cls-card">
        <div class="vital-header">
          <span class="vital-name">CLS</span>
          <span class="vital-status" id="cls-status">-</span>
        </div>
        <div class="vital-value" id="cls-value">-</div>
        <div class="vital-description">Cumulative Layout Shift</div>
        <div class="vital-threshold">Good: &lt; 0.1</div>
      </div>
      
      <div class="vital-card" id="fcp-card">
        <div class="vital-header">
          <span class="vital-name">FCP</span>
          <span class="vital-status" id="fcp-status">-</span>
        </div>
        <div class="vital-value" id="fcp-value">-</div>
        <div class="vital-description">First Contentful Paint</div>
        <div class="vital-threshold">Good: &lt; 1.8s</div>
      </div>
      
      <div class="vital-card" id="ttfb-card">
        <div class="vital-header">
          <span class="vital-name">TTFB</span>
          <span class="vital-status" id="ttfb-status">-</span>
        </div>
        <div class="vital-value" id="ttfb-value">-</div>
        <div class="vital-description">Time to First Byte</div>
        <div class="vital-threshold">Good: &lt; 800ms</div>
      </div>
      
      <div class="vital-card" id="inp-card">
        <div class="vital-header">
          <span class="vital-name">INP</span>
          <span class="vital-status" id="inp-status">-</span>
        </div>
        <div class="vital-value" id="inp-value">-</div>
        <div class="vital-description">Interaction to Next Paint</div>
        <div class="vital-threshold">Good: &lt; 200ms</div>
      </div>
    </div>
  </div>

  <div class="dashboard-section">
    <h3>Content Performance</h3>
    <div class="content-performance">
      <div class="performance-chart">
        <canvas id="content-views-chart" width="400" height="200"></canvas>
      </div>
      <div class="top-content">
        <h4>Top Performing Content</h4>
        <div id="top-content-list" class="content-list">
          <div class="loading">Loading...</div>
        </div>
      </div>
    </div>
  </div>

  <div class="dashboard-section">
    <h3>User Behavior</h3>
    <div class="behavior-metrics">
      <div class="behavior-chart">
        <canvas id="user-flow-chart" width="400" height="200"></canvas>
      </div>
      <div class="behavior-stats">
        <div class="stat-item">
          <span class="stat-label">Avg Session Duration</span>
          <span class="stat-value" id="avg-session-duration">-</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Pages per Session</span>
          <span class="stat-value" id="pages-per-session">-</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Search Queries</span>
          <span class="stat-value" id="search-queries">-</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Form Interactions</span>
          <span class="stat-value" id="form-interactions">-</span>
        </div>
      </div>
    </div>
  </div>

  {showHistorical && (
    <div class="dashboard-section">
      <h3>Historical Trends</h3>
      <div class="trend-controls">
        <select id="trend-period">
          <option value="24h">Last 24 Hours</option>
          <option value="7d">Last 7 Days</option>
          <option value="30d">Last 30 Days</option>
        </select>
        <select id="trend-metric">
          <option value="performance">Performance</option>
          <option value="user_behavior">User Behavior</option>
          <option value="content_interaction">Content Interaction</option>
          <option value="web_vitals">Web Vitals</option>
        </select>
      </div>
      <div class="trend-chart">
        <canvas id="historical-chart" width="800" height="300"></canvas>
      </div>
    </div>
  )}

  <div class="dashboard-section">
    <h3>SEO Performance</h3>
    <div class="seo-metrics">
      <div class="seo-score-card">
        <div class="score-circle" id="seo-score-circle">
          <span class="score-value" id="seo-score">-</span>
        </div>
        <div class="score-label">SEO Score</div>
      </div>
      <div class="seo-issues">
        <h4>SEO Issues</h4>
        <div id="seo-issues-list" class="issues-list">
          <div class="loading">Loading...</div>
        </div>
      </div>
    </div>
  </div>

  <div class="dashboard-section">
    <h3>Recent Events</h3>
    <div class="events-log">
      <div class="events-header">
        <select id="event-filter">
          <option value="">All Events</option>
          <option value="web_vitals">Web Vitals</option>
          <option value="performance">Performance</option>
          <option value="user_behavior">User Behavior</option>
          <option value="content_interaction">Content Interaction</option>
          <option value="seo">SEO</option>
          <option value="custom_event">Custom Events</option>
        </select>
        <button id="clear-events" class="btn btn-small">Clear</button>
      </div>
      <div id="events-list" class="events-list">
        <div class="loading">Loading events...</div>
      </div>
    </div>
  </div>
</div>

<style>
  .performance-dashboard {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 2px solid #e5e7eb;
  }

  .dashboard-header h2 {
    margin: 0;
    color: #1f2937;
    font-size: 2rem;
    font-weight: 700;
  }

  .dashboard-controls {
    display: flex;
    gap: 10px;
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }

  .btn-primary {
    background: #3b82f6;
    color: white;
  }

  .btn-primary:hover {
    background: #2563eb;
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
  }

  .btn-secondary:hover {
    background: #4b5563;
  }

  .btn-small {
    padding: 4px 8px;
    font-size: 12px;
  }

  .dashboard-section {
    margin-bottom: 40px;
    background: white;
    border-radius: 8px;
    padding: 24px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .dashboard-section h3 {
    margin: 0 0 20px 0;
    color: #1f2937;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .metrics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
  }

  .metric-card {
    background: #f9fafb;
    border-radius: 8px;
    padding: 20px;
    text-align: center;
    border: 1px solid #e5e7eb;
  }

  .metric-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 8px;
  }

  .metric-label {
    font-size: 14px;
    color: #6b7280;
    margin-bottom: 8px;
  }

  .metric-trend {
    font-size: 12px;
    font-weight: 500;
  }

  .metric-trend.up {
    color: #10b981;
  }

  .metric-trend.down {
    color: #ef4444;
  }

  .web-vitals-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 16px;
  }

  .vital-card {
    background: #f9fafb;
    border-radius: 8px;
    padding: 16px;
    border: 1px solid #e5e7eb;
  }

  .vital-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }

  .vital-name {
    font-weight: 600;
    color: #1f2937;
  }

  .vital-status {
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
  }

  .vital-status.good {
    background: #d1fae5;
    color: #065f46;
  }

  .vital-status.needs-improvement {
    background: #fef3c7;
    color: #92400e;
  }

  .vital-status.poor {
    background: #fee2e2;
    color: #991b1b;
  }

  .vital-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
    margin-bottom: 8px;
  }

  .vital-description {
    font-size: 12px;
    color: #6b7280;
    margin-bottom: 4px;
  }

  .vital-threshold {
    font-size: 11px;
    color: #9ca3af;
  }

  .content-performance {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 24px;
  }

  .performance-chart {
    background: #f9fafb;
    border-radius: 8px;
    padding: 16px;
  }

  .top-content {
    background: #f9fafb;
    border-radius: 8px;
    padding: 16px;
  }

  .top-content h4 {
    margin: 0 0 16px 0;
    color: #1f2937;
    font-size: 1.1rem;
  }

  .content-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .content-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 12px;
    background: white;
    border-radius: 4px;
    font-size: 14px;
  }

  .content-title {
    font-weight: 500;
    color: #1f2937;
  }

  .content-views {
    color: #6b7280;
    font-size: 12px;
  }

  .behavior-metrics {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 24px;
  }

  .behavior-chart {
    background: #f9fafb;
    border-radius: 8px;
    padding: 16px;
  }

  .behavior-stats {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .stat-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    background: #f9fafb;
    border-radius: 6px;
  }

  .stat-label {
    font-size: 14px;
    color: #6b7280;
  }

  .stat-value {
    font-weight: 600;
    color: #1f2937;
  }

  .trend-controls {
    display: flex;
    gap: 12px;
    margin-bottom: 20px;
  }

  .trend-controls select {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    background: white;
    font-size: 14px;
  }

  .trend-chart {
    background: #f9fafb;
    border-radius: 8px;
    padding: 16px;
  }

  .seo-metrics {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 24px;
  }

  .seo-score-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
  }

  .score-circle {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: conic-gradient(#10b981 0deg, #10b981 var(--score-angle, 0deg), #e5e7eb var(--score-angle, 0deg));
    margin-bottom: 12px;
    position: relative;
  }

  .score-circle::before {
    content: '';
    position: absolute;
    width: 80px;
    height: 80px;
    background: white;
    border-radius: 50%;
  }

  .score-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #1f2937;
    z-index: 1;
  }

  .score-label {
    font-size: 14px;
    color: #6b7280;
  }

  .seo-issues h4 {
    margin: 0 0 16px 0;
    color: #1f2937;
    font-size: 1.1rem;
  }

  .issues-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .issue-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: #fef3c7;
    border-radius: 4px;
    font-size: 14px;
  }

  .issue-item.error {
    background: #fee2e2;
  }

  .issue-item.warning {
    background: #fef3c7;
  }

  .issue-item.info {
    background: #dbeafe;
  }

  .events-log {
    max-height: 400px;
    overflow-y: auto;
  }

  .events-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
  }

  .events-header select {
    padding: 6px 10px;
    border: 1px solid #d1d5db;
    border-radius: 4px;
    font-size: 14px;
  }

  .events-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .event-item {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 12px;
    background: #f9fafb;
    border-radius: 6px;
    border-left: 4px solid #e5e7eb;
    font-size: 14px;
  }

  .event-item.web_vitals {
    border-left-color: #3b82f6;
  }

  .event-item.performance {
    border-left-color: #10b981;
  }

  .event-item.user_behavior {
    border-left-color: #f59e0b;
  }

  .event-item.content_interaction {
    border-left-color: #8b5cf6;
  }

  .event-item.seo {
    border-left-color: #ef4444;
  }

  .event-content {
    flex: 1;
  }

  .event-type {
    font-weight: 500;
    color: #1f2937;
    margin-bottom: 4px;
  }

  .event-details {
    color: #6b7280;
    font-size: 12px;
  }

  .event-time {
    color: #9ca3af;
    font-size: 12px;
    white-space: nowrap;
  }

  .loading {
    text-align: center;
    color: #6b7280;
    font-style: italic;
    padding: 20px;
  }

  @media (max-width: 768px) {
    .performance-dashboard {
      padding: 10px;
    }

    .dashboard-header {
      flex-direction: column;
      gap: 16px;
      align-items: flex-start;
    }

    .content-performance,
    .behavior-metrics,
    .seo-metrics {
      grid-template-columns: 1fr;
    }

    .trend-controls {
      flex-direction: column;
    }
  }
</style>

<script define:vars={{ refreshInterval }}>
  class PerformanceDashboard {
    constructor() {
      this.refreshInterval = refreshInterval;
      this.charts = {};
      this.eventFilter = '';
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.loadInitialData();
      this.startAutoRefresh();
    }

    setupEventListeners() {
      // Refresh button
      document.getElementById('refresh-btn')?.addEventListener('click', () => {
        this.loadInitialData();
      });

      // Export button
      document.getElementById('export-btn')?.addEventListener('click', () => {
        this.exportData();
      });

      // Event filter
      document.getElementById('event-filter')?.addEventListener('change', (e) => {
        this.eventFilter = e.target.value;
        this.loadEvents();
      });

      // Clear events
      document.getElementById('clear-events')?.addEventListener('click', () => {
        this.clearEvents();
      });

      // Trend controls
      document.getElementById('trend-period')?.addEventListener('change', () => {
        this.loadHistoricalData();
      });

      document.getElementById('trend-metric')?.addEventListener('change', () => {
        this.loadHistoricalData();
      });
    }

    async loadInitialData() {
      try {
        await Promise.all([
          this.loadRealTimeMetrics(),
          this.loadWebVitals(),
          this.loadContentPerformance(),
          this.loadUserBehavior(),
          this.loadSEOMetrics(),
          this.loadEvents(),
          this.loadHistoricalData()
        ]);
      } catch (error) {
        console.error('Failed to load dashboard data:', error);
      }
    }

    async loadRealTimeMetrics() {
      try {
        const response = await fetch('/api/analytics?type=user_behavior&limit=1000');
        const data = await response.json();
        
        // Calculate metrics from events
        const now = Date.now();
        const oneHour = 60 * 60 * 1000;
        const recentEvents = data.events.filter(e => now - e.timestamp < oneHour);
        
        // Active users (unique sessions in last hour)
        const activeSessions = new Set(recentEvents.map(e => e.data.sessionId)).size;
        this.updateMetric('active-users', activeSessions);
        
        // Page views
        const pageViews = recentEvents.filter(e => e.data.event === 'page_view').length;
        this.updateMetric('page-views', pageViews);
        
        // Load performance data
        const perfResponse = await fetch('/api/analytics?type=performance&limit=100');
        const perfData = await perfResponse.json();
        
        if (perfData.events.length > 0) {
          const avgLoadTime = perfData.events.reduce((sum, e) => sum + e.data.loadTime, 0) / perfData.events.length;
          this.updateMetric('avg-load-time', `${Math.round(avgLoadTime)}ms`);
        }
        
        // Calculate bounce rate (simplified)
        const sessions = {};
        recentEvents.forEach(e => {
          if (!sessions[e.data.sessionId]) {
            sessions[e.data.sessionId] = 0;
          }
          sessions[e.data.sessionId]++;
        });
        
        const totalSessions = Object.keys(sessions).length;
        const bouncedSessions = Object.values(sessions).filter(count => count === 1).length;
        const bounceRate = totalSessions > 0 ? Math.round((bouncedSessions / totalSessions) * 100) : 0;
        this.updateMetric('bounce-rate', `${bounceRate}%`);
        
      } catch (error) {
        console.error('Failed to load real-time metrics:', error);
      }
    }

    async loadWebVitals() {
      try {
        const response = await fetch('/api/analytics?type=web_vitals&limit=100');
        const data = await response.json();
        
        // Group by metric name and get latest values
        const vitals = {};
        data.events.forEach(event => {
          const { name, value, rating } = event.data;
          if (!vitals[name] || event.timestamp > vitals[name].timestamp) {
            vitals[name] = { value, rating, timestamp: event.timestamp };
          }
        });
        
        // Update vital cards
        Object.entries(vitals).forEach(([name, vital]) => {
          this.updateVital(name.toLowerCase(), vital.value, vital.rating);
        });
        
      } catch (error) {
        console.error('Failed to load web vitals:', error);
      }
    }

    async loadContentPerformance() {
      try {
        const response = await fetch('/api/analytics?type=content_interaction&limit=500');
        const data = await response.json();
        
        // Aggregate content views
        const contentViews = {};
        data.events.forEach(event => {
          const { contentId, contentType } = event.data;
          const key = `${contentType}:${contentId}`;
          contentViews[key] = (contentViews[key] || 0) + 1;
        });
        
        // Sort and display top content
        const topContent = Object.entries(contentViews)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 10);
        
        this.updateTopContent(topContent);
        
      } catch (error) {
        console.error('Failed to load content performance:', error);
      }
    }

    async loadUserBehavior() {
      try {
        const response = await fetch('/api/analytics?type=user_behavior&limit=1000');
        const data = await response.json();
        
        // Calculate behavior metrics
        const sessions = {};
        let totalSearches = 0;
        let totalFormInteractions = 0;
        
        data.events.forEach(event => {
          const sessionId = event.data.sessionId;
          if (!sessions[sessionId]) {
            sessions[sessionId] = {
              startTime: event.timestamp,
              endTime: event.timestamp,
              pageViews: 0
            };
          }
          
          sessions[sessionId].endTime = Math.max(sessions[sessionId].endTime, event.timestamp);
          
          if (event.data.event === 'page_view') {
            sessions[sessionId].pageViews++;
          } else if (event.data.event === 'search') {
            totalSearches++;
          } else if (event.data.event === 'form_interaction') {
            totalFormInteractions++;
          }
        });
        
        // Calculate averages
        const sessionValues = Object.values(sessions);
        const avgDuration = sessionValues.length > 0 
          ? sessionValues.reduce((sum, s) => sum + (s.endTime - s.startTime), 0) / sessionValues.length
          : 0;
        const avgPagesPerSession = sessionValues.length > 0
          ? sessionValues.reduce((sum, s) => sum + s.pageViews, 0) / sessionValues.length
          : 0;
        
        // Update UI
        this.updateElement('avg-session-duration', this.formatDuration(avgDuration));
        this.updateElement('pages-per-session', avgPagesPerSession.toFixed(1));
        this.updateElement('search-queries', totalSearches);
        this.updateElement('form-interactions', totalFormInteractions);
        
      } catch (error) {
        console.error('Failed to load user behavior:', error);
      }
    }

    async loadSEOMetrics() {
      try {
        const response = await fetch('/api/analytics?type=seo&limit=100');
        const data = await response.json();
        
        if (data.events.length === 0) return;
        
        // Calculate SEO score based on latest data
        const latestSEO = data.events[data.events.length - 1].data;
        let score = 100;
        const issues = [];
        
        // Check various SEO factors
        if (latestSEO.h1Count !== 1) {
          score -= 10;
          issues.push({
            type: 'error',
            message: `${latestSEO.h1Count} H1 tags found (should be 1)`
          });
        }
        
        if (latestSEO.imagesWithoutAlt > 0) {
          score -= latestSEO.imagesWithoutAlt * 5;
          issues.push({
            type: 'warning',
            message: `${latestSEO.imagesWithoutAlt} images without alt text`
          });
        }
        
        if (!latestSEO.metaDescription) {
          score -= 15;
          issues.push({
            type: 'error',
            message: 'Missing meta description'
          });
        }
        
        if (latestSEO.loadTime > 3000) {
          score -= 20;
          issues.push({
            type: 'warning',
            message: `Slow load time: ${latestSEO.loadTime}ms`
          });
        }
        
        if (!latestSEO.mobileUsability) {
          score -= 25;
          issues.push({
            type: 'error',
            message: 'Not mobile-friendly'
          });
        }
        
        // Update SEO score
        this.updateSEOScore(Math.max(0, score));
        this.updateSEOIssues(issues);
        
      } catch (error) {
        console.error('Failed to load SEO metrics:', error);
      }
    }

    async loadEvents() {
      try {
        const url = this.eventFilter 
          ? `/api/analytics?type=${this.eventFilter}&limit=50`
          : '/api/analytics?limit=50';
        
        const response = await fetch(url);
        const data = await response.json();
        
        this.updateEventsList(data.events);
        
      } catch (error) {
        console.error('Failed to load events:', error);
      }
    }

    async loadHistoricalData() {
      // This would load historical trend data for charts
      // Implementation depends on your charting library (Chart.js, D3, etc.)
      console.log('Loading historical data...');
    }

    updateMetric(id, value, trend) {
      this.updateElement(id, value);
      if (trend) {
        const trendElement = document.getElementById(`${id}-trend`);
        if (trendElement) {
          trendElement.textContent = trend;
          trendElement.className = `metric-trend ${trend.startsWith('+') ? 'up' : 'down'}`;
        }
      }
    }

    updateVital(name, value, rating) {
      this.updateElement(`${name}-value`, this.formatVitalValue(name, value));
      
      const statusElement = document.getElementById(`${name}-status`);
      if (statusElement) {
        statusElement.textContent = rating.replace('-', ' ');
        statusElement.className = `vital-status ${rating}`;
      }
    }

    updateTopContent(topContent) {
      const container = document.getElementById('top-content-list');
      if (!container) return;
      
      container.innerHTML = topContent.map(([content, views]) => {
        const [type, id] = content.split(':');
        return `
          <div class="content-item">
            <span class="content-title">${type}: ${id}</span>
            <span class="content-views">${views} views</span>
          </div>
        `;
      }).join('');
    }

    updateSEOScore(score) {
      const scoreElement = document.getElementById('seo-score');
      const circleElement = document.getElementById('seo-score-circle');
      
      if (scoreElement) {
        scoreElement.textContent = score;
      }
      
      if (circleElement) {
        const angle = (score / 100) * 360;
        circleElement.style.setProperty('--score-angle', `${angle}deg`);
      }
    }

    updateSEOIssues(issues) {
      const container = document.getElementById('seo-issues-list');
      if (!container) return;
      
      if (issues.length === 0) {
        container.innerHTML = '<div class="issue-item info">No SEO issues found!</div>';
        return;
      }
      
      container.innerHTML = issues.map(issue => `
        <div class="issue-item ${issue.type}">
          ${issue.message}
        </div>
      `).join('');
    }

    updateEventsList(events) {
      const container = document.getElementById('events-list');
      if (!container) return;
      
      if (events.length === 0) {
        container.innerHTML = '<div class="loading">No events found</div>';
        return;
      }
      
      container.innerHTML = events.slice(-20).reverse().map(event => `
        <div class="event-item ${event.type}">
          <div class="event-content">
            <div class="event-type">${event.type.replace('_', ' ')}</div>
            <div class="event-details">${this.formatEventDetails(event)}</div>
          </div>
          <div class="event-time">${this.formatTime(event.timestamp)}</div>
        </div>
      `).join('');
    }

    updateElement(id, value) {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    }

    formatVitalValue(name, value) {
      switch (name) {
        case 'lcp':
        case 'fcp':
        case 'fid':
        case 'inp':
        case 'ttfb':
          return `${Math.round(value)}ms`;
        case 'cls':
          return value.toFixed(3);
        default:
          return value.toString();
      }
    }

    formatDuration(ms) {
      const seconds = Math.floor(ms / 1000);
      const minutes = Math.floor(seconds / 60);
      const hours = Math.floor(minutes / 60);
      
      if (hours > 0) {
        return `${hours}h ${minutes % 60}m`;
      } else if (minutes > 0) {
        return `${minutes}m ${seconds % 60}s`;
      } else {
        return `${seconds}s`;
      }
    }

    formatTime(timestamp) {
      return new Date(timestamp).toLocaleTimeString();
    }

    formatEventDetails(event) {
      const data = event.data;
      switch (event.type) {
        case 'web_vitals':
          return `${data.name}: ${this.formatVitalValue(data.name.toLowerCase(), data.value)} (${data.rating})`;
        case 'performance':
          return `Load time: ${Math.round(data.loadTime)}ms`;
        case 'user_behavior':
          return `${data.event}: ${JSON.stringify(data.data).substring(0, 50)}...`;
        case 'content_interaction':
          return `${data.contentType}: ${data.contentId}`;
        case 'seo':
          return `${data.title} - Score: ${data.h1Count} H1s, ${data.imagesWithoutAlt} missing alt`;
        default:
          return JSON.stringify(data).substring(0, 100) + '...';
      }
    }

    async exportData() {
      try {
        const response = await fetch('/api/analytics?limit=10000');
        const data = await response.json();
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = `analytics-export-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        URL.revokeObjectURL(url);
      } catch (error) {
        console.error('Failed to export data:', error);
      }
    }

    clearEvents() {
      // This would clear events from storage
      // For now, just refresh the display
      this.loadEvents();
    }

    startAutoRefresh() {
      setInterval(() => {
        this.loadRealTimeMetrics();
        this.loadWebVitals();
      }, this.refreshInterval);
    }
  }

  // Initialize dashboard when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PerformanceDashboard();
    });
  } else {
    new PerformanceDashboard();
  }
</script>